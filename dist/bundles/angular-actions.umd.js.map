{"version":3,"file":"angular-actions.umd.js","sources":["../ActionResult.js","../Action.js"],"sourcesContent":["/**\r\n * Use to indicate the result of the action (i.e., Sucess, Fail, or Unknown).\r\n */\r\n/**\r\n * Use to indicate the result of the action (i.e., Sucess, Fail, or Unknown).\r\n */\r\nexport var ActionResult;\r\n/**\r\n * Use to indicate the result of the action (i.e., Sucess, Fail, or Unknown).\r\n */\r\n(function (ActionResult) {\r\n    /**\r\n     * Use to indicate that the action's result is success.\r\n     */\r\n    ActionResult[ActionResult[\"Success\"] = 1] = \"Success\";\r\n    /**\r\n     * Use to indicate that the action's result is failure.\r\n     */\r\n    ActionResult[ActionResult[\"Fail\"] = 2] = \"Fail\";\r\n    /**\r\n     * Use to indicate that the action's result is unknown.\r\n     */\r\n    ActionResult[ActionResult[\"Unknown\"] = 3] = \"Unknown\";\r\n})(ActionResult || (ActionResult = {}));\r\n//# sourceMappingURL=ActionResult.js.map","import { ValidationContext } from 'angular-rules-engine';\r\nimport { ValidationContextState } from 'angular-rules-engine';\r\nimport { ActionResult } from './ActionResult';\r\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nvar /**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nAction = (function () {\r\n    function Action() {\r\n        this.allowExecution = true;\r\n        this._validationContext = new ValidationContext();\r\n        this.actionResult = ActionResult.Unknown;\r\n    }\r\n    Object.defineProperty(Action.prototype, \"validationContext\", {\r\n        get: function () {\r\n            return this._validationContext;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Use this method to execute a concrete action. A concrete action must implement\r\n     * the [processAction] and the [validateActionResult] functions to be a valid\r\n     * action.\r\n     */\r\n    /**\r\n         * Use this method to execute a concrete action. A concrete action must implement\r\n         * the [processAction] and the [validateActionResult] functions to be a valid\r\n         * action.\r\n         */\r\n    Action.prototype.execute = /**\r\n         * Use this method to execute a concrete action. A concrete action must implement\r\n         * the [processAction] and the [validateActionResult] functions to be a valid\r\n         * action.\r\n         */\r\n    function () {\r\n        console.log('Preparing to execute action.');\r\n        this.processActionPipeline();\r\n    };\r\n    Action.prototype.processActionPipeline = function () {\r\n        this.startAction();\r\n        if (this.allowExecution) {\r\n            this.processAction();\r\n        }\r\n        this.finishAction();\r\n    };\r\n    ;\r\n    Action.prototype.startAction = function () {\r\n        console.log('Starting action.');\r\n        this.start();\r\n        this.audit();\r\n        this.preValidateAction();\r\n        this.evaluateRules();\r\n        this.postValidateAction();\r\n        this.preExecuteAction();\r\n    };\r\n    Action.prototype.finishAction = function () {\r\n        console.log('Finishing action.');\r\n        this.postExecuteAction();\r\n        this.validateActionResult();\r\n        this.finish();\r\n    };\r\n    Action.prototype.processAction = function () {\r\n        console.log('Processing action.');\r\n        this.performAction();\r\n    };\r\n    /**\r\n     * All action must implement this function. This is where your\r\n     * [business logic] should be implemented. This function is called if\r\n     * there are no validation rule exceptions.\r\n     */\r\n    /**\r\n         * All action must implement this function. This is where your\r\n         * [business logic] should be implemented. This function is called if\r\n         * there are no validation rule exceptions.\r\n         */\r\n    Action.prototype.performAction = /**\r\n         * All action must implement this function. This is where your\r\n         * [business logic] should be implemented. This function is called if\r\n         * there are no validation rule exceptions.\r\n         */\r\n    function () {\r\n        throw new Error('Not implemented. Requires implementation in concrete action.');\r\n    };\r\n    /**\r\n     * Override/Implement this function to perform an early operation in the action pipeline.\r\n     * This function belongs to the pre-execute functions of the action pipeline.\r\n     */\r\n    /**\r\n         * Override/Implement this function to perform an early operation in the action pipeline.\r\n         * This function belongs to the pre-execute functions of the action pipeline.\r\n         */\r\n    Action.prototype.start = /**\r\n         * Override/Implement this function to perform an early operation in the action pipeline.\r\n         * This function belongs to the pre-execute functions of the action pipeline.\r\n         */\r\n    function () {\r\n        console.log('Starting action.');\r\n    };\r\n    /**\r\n     * Implement this function to perform any auditing features during the pre-exectuion of the\r\n     * business logic.\r\n     */\r\n    /**\r\n         * Implement this function to perform any auditing features during the pre-exectuion of the\r\n         * business logic.\r\n         */\r\n    Action.prototype.audit = /**\r\n         * Implement this function to perform any auditing features during the pre-exectuion of the\r\n         * business logic.\r\n         */\r\n    function () {\r\n        console.log('Auditing action.');\r\n    };\r\n    /**\r\n     * Use this function to setup any validation rules before the validation happens. This\r\n     * function is called before [evaluateRules].\r\n     */\r\n    /**\r\n         * Use this function to setup any validation rules before the validation happens. This\r\n         * function is called before [evaluateRules].\r\n         */\r\n    Action.prototype.preValidateAction = /**\r\n         * Use this function to setup any validation rules before the validation happens. This\r\n         * function is called before [evaluateRules].\r\n         */\r\n    function () {\r\n        console.log('Pre-validating action.');\r\n    };\r\n    /**\r\n     * Use this function to implement the execution of the validation and business rules. This\r\n     * function is called after [preValidateAction].\r\n     */\r\n    /**\r\n         * Use this function to implement the execution of the validation and business rules. This\r\n         * function is called after [preValidateAction].\r\n         */\r\n    Action.prototype.evaluateRules = /**\r\n         * Use this function to implement the execution of the validation and business rules. This\r\n         * function is called after [preValidateAction].\r\n         */\r\n    function () {\r\n        console.log('Evaluating action rules.');\r\n        var context = this.validateAction();\r\n        if (context.isValid) {\r\n            this.allowExecution = true;\r\n            this.validationContext.state = ValidationContextState.Success;\r\n        }\r\n        else {\r\n            this.allowExecution = false;\r\n            this.validationContext.state = ValidationContextState.Failure;\r\n        }\r\n    };\r\n    /**\r\n     * Use to determine or handle the results of the rule evalation. This\r\n     * function is called after the [evaluateRules].\r\n     */\r\n    /**\r\n         * Use to determine or handle the results of the rule evalation. This\r\n         * function is called after the [evaluateRules].\r\n         */\r\n    Action.prototype.postValidateAction = /**\r\n         * Use to determine or handle the results of the rule evalation. This\r\n         * function is called after the [evaluateRules].\r\n         */\r\n    function () {\r\n        console.log('Post-Validation of action.');\r\n    };\r\n    /**\r\n     * Use this function to perform any setup before the action is executed.\r\n     */\r\n    /**\r\n         * Use this function to perform any setup before the action is executed.\r\n         */\r\n    Action.prototype.preExecuteAction = /**\r\n         * Use this function to perform any setup before the action is executed.\r\n         */\r\n    function () {\r\n        console.log('Pre-execution of action.');\r\n    };\r\n    /**\r\n     * Use this funciton to evaluate the action after the the business logic within\r\n     * the [performAction] has executed.\r\n     */\r\n    /**\r\n         * Use this funciton to evaluate the action after the the business logic within\r\n         * the [performAction] has executed.\r\n         */\r\n    Action.prototype.postExecuteAction = /**\r\n         * Use this funciton to evaluate the action after the the business logic within\r\n         * the [performAction] has executed.\r\n         */\r\n    function () {\r\n        console.log('Post-execution of action');\r\n    };\r\n    /**\r\n     * This function requires implementation to determin the state and result of the action.\r\n     * Use this opportunity to validate the results.\r\n     */\r\n    /**\r\n         * This function requires implementation to determin the state and result of the action.\r\n         * Use this opportunity to validate the results.\r\n         */\r\n    Action.prototype.validateActionResult = /**\r\n         * This function requires implementation to determin the state and result of the action.\r\n         * Use this opportunity to validate the results.\r\n         */\r\n    function () {\r\n        throw new Error('Concrete actions required to implement this method.');\r\n    };\r\n    /**\r\n     * Use this function to perform any cleanup, logging, or disposing of resources used\r\n     * by the action. This is the last function called during the pipeline.\r\n     */\r\n    /**\r\n         * Use this function to perform any cleanup, logging, or disposing of resources used\r\n         * by the action. This is the last function called during the pipeline.\r\n         */\r\n    Action.prototype.finish = /**\r\n         * Use this function to perform any cleanup, logging, or disposing of resources used\r\n         * by the action. This is the last function called during the pipeline.\r\n         */\r\n    function () {\r\n        console.log('Finish action.');\r\n    };\r\n    /**\r\n     * Implement this function to perform validation of business rules and data.\r\n     */\r\n    /**\r\n         * Implement this function to perform validation of business rules and data.\r\n         */\r\n    Action.prototype.validateAction = /**\r\n         * Implement this function to perform validation of business rules and data.\r\n         */\r\n    function () {\r\n        console.log('Validating the action.');\r\n        return this.validationContext;\r\n    };\r\n    return Action;\r\n}());\r\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nexport { Action };\r\n//# sourceMappingURL=Action.js.map"],"names":["ActionResult","ValidationContext","ValidationContextState"],"mappings":"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"}