{"version":3,"file":"angular-actions.umd.js","sources":["../action/ActionResult.js","../action/action.js","../service/MessageType.js","../service/ServiceContext.js","../service/ServiceMessage.js"],"sourcesContent":["/**\r\n * Use to indicate the result of the action (i.e., Sucess, Fail, or Unknown).\r\n */\r\n/**\r\n * Use to indicate the result of the action (i.e., Sucess, Fail, or Unknown).\r\n */\r\nexport var ActionResult;\r\n/**\r\n * Use to indicate the result of the action (i.e., Sucess, Fail, or Unknown).\r\n */\r\n(function (ActionResult) {\r\n    /**\r\n     * Use to indicate that the action's result is success.\r\n     */\r\n    ActionResult[ActionResult[\"Success\"] = 1] = \"Success\";\r\n    /**\r\n     * Use to indicate that the action's result is failure.\r\n     */\r\n    ActionResult[ActionResult[\"Fail\"] = 2] = \"Fail\";\r\n    /**\r\n     * Use to indicate that the action's result is unknown.\r\n     */\r\n    ActionResult[ActionResult[\"Unknown\"] = 3] = \"Unknown\";\r\n})(ActionResult || (ActionResult = {}));\r\n//# sourceMappingURL=ActionResult.js.map","import { ValidationContext } from 'angular-rules-engine';\r\nimport { ValidationContextState } from 'angular-rules-engine';\r\nimport { ActionResult } from './ActionResult';\r\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nvar /**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nAction = (function () {\r\n    function Action() {\r\n        this.allowExecution = true;\r\n        this._validationContext = new ValidationContext();\r\n        this.actionResult = ActionResult.Unknown;\r\n    }\r\n    Object.defineProperty(Action.prototype, \"validationContext\", {\r\n        get: function () {\r\n            return this._validationContext;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Use this method to execute a concrete action. A concrete action must implement\r\n     * the [processAction] and the [validateActionResult] functions to be a valid\r\n     * action.\r\n     */\r\n    /**\r\n         * Use this method to execute a concrete action. A concrete action must implement\r\n         * the [processAction] and the [validateActionResult] functions to be a valid\r\n         * action.\r\n         */\r\n    Action.prototype.execute = /**\r\n         * Use this method to execute a concrete action. A concrete action must implement\r\n         * the [processAction] and the [validateActionResult] functions to be a valid\r\n         * action.\r\n         */\r\n    function () {\r\n        console.log('Preparing to execute action.');\r\n        this.processActionPipeline();\r\n    };\r\n    Action.prototype.processActionPipeline = function () {\r\n        this.startAction();\r\n        if (this.allowExecution) {\r\n            this.processAction();\r\n        }\r\n        this.finishAction();\r\n    };\r\n    ;\r\n    Action.prototype.startAction = function () {\r\n        console.log('Starting action.');\r\n        this.start();\r\n        this.audit();\r\n        this.preValidateAction();\r\n        this.evaluateRules();\r\n        this.postValidateAction();\r\n        this.preExecuteAction();\r\n    };\r\n    Action.prototype.finishAction = function () {\r\n        console.log('Finishing action.');\r\n        this.postExecuteAction();\r\n        this.validateActionResult();\r\n        this.finish();\r\n    };\r\n    Action.prototype.processAction = function () {\r\n        console.log('Processing action.');\r\n        this.performAction();\r\n    };\r\n    /**\r\n     * All action must implement this function. This is where your\r\n     * [business logic] should be implemented. This function is called if\r\n     * there are no validation rule exceptions.\r\n     */\r\n    /**\r\n         * All action must implement this function. This is where your\r\n         * [business logic] should be implemented. This function is called if\r\n         * there are no validation rule exceptions.\r\n         */\r\n    Action.prototype.performAction = /**\r\n         * All action must implement this function. This is where your\r\n         * [business logic] should be implemented. This function is called if\r\n         * there are no validation rule exceptions.\r\n         */\r\n    function () {\r\n        throw new Error('Not implemented. Requires implementation in concrete action.');\r\n    };\r\n    /**\r\n     * Override/Implement this function to perform an early operation in the action pipeline.\r\n     * This function belongs to the pre-execute functions of the action pipeline.\r\n     */\r\n    /**\r\n         * Override/Implement this function to perform an early operation in the action pipeline.\r\n         * This function belongs to the pre-execute functions of the action pipeline.\r\n         */\r\n    Action.prototype.start = /**\r\n         * Override/Implement this function to perform an early operation in the action pipeline.\r\n         * This function belongs to the pre-execute functions of the action pipeline.\r\n         */\r\n    function () {\r\n        console.log('Starting action.');\r\n    };\r\n    /**\r\n     * Implement this function to perform any auditing features during the pre-exectuion of the\r\n     * business logic.\r\n     */\r\n    /**\r\n         * Implement this function to perform any auditing features during the pre-exectuion of the\r\n         * business logic.\r\n         */\r\n    Action.prototype.audit = /**\r\n         * Implement this function to perform any auditing features during the pre-exectuion of the\r\n         * business logic.\r\n         */\r\n    function () {\r\n        console.log('Auditing action.');\r\n    };\r\n    /**\r\n     * Use this function to setup any validation rules before the validation happens. This\r\n     * function is called before [evaluateRules].\r\n     */\r\n    /**\r\n         * Use this function to setup any validation rules before the validation happens. This\r\n         * function is called before [evaluateRules].\r\n         */\r\n    Action.prototype.preValidateAction = /**\r\n         * Use this function to setup any validation rules before the validation happens. This\r\n         * function is called before [evaluateRules].\r\n         */\r\n    function () {\r\n        console.log('Pre-validating action.');\r\n    };\r\n    /**\r\n     * Use this function to implement the execution of the validation and business rules. This\r\n     * function is called after [preValidateAction].\r\n     */\r\n    /**\r\n         * Use this function to implement the execution of the validation and business rules. This\r\n         * function is called after [preValidateAction].\r\n         */\r\n    Action.prototype.evaluateRules = /**\r\n         * Use this function to implement the execution of the validation and business rules. This\r\n         * function is called after [preValidateAction].\r\n         */\r\n    function () {\r\n        console.log('Evaluating action rules.');\r\n        var context = this.validateAction();\r\n        if (context.isValid) {\r\n            this.allowExecution = true;\r\n            this.validationContext.state = ValidationContextState.Success;\r\n        }\r\n        else {\r\n            this.allowExecution = false;\r\n            this.validationContext.state = ValidationContextState.Failure;\r\n        }\r\n    };\r\n    /**\r\n     * Use to determine or handle the results of the rule evalation. This\r\n     * function is called after the [evaluateRules].\r\n     */\r\n    /**\r\n         * Use to determine or handle the results of the rule evalation. This\r\n         * function is called after the [evaluateRules].\r\n         */\r\n    Action.prototype.postValidateAction = /**\r\n         * Use to determine or handle the results of the rule evalation. This\r\n         * function is called after the [evaluateRules].\r\n         */\r\n    function () {\r\n        console.log('Post-Validation of action.');\r\n    };\r\n    /**\r\n     * Use this function to perform any setup before the action is executed.\r\n     */\r\n    /**\r\n         * Use this function to perform any setup before the action is executed.\r\n         */\r\n    Action.prototype.preExecuteAction = /**\r\n         * Use this function to perform any setup before the action is executed.\r\n         */\r\n    function () {\r\n        console.log('Pre-execution of action.');\r\n    };\r\n    /**\r\n     * Use this funciton to evaluate the action after the the business logic within\r\n     * the [performAction] has executed.\r\n     */\r\n    /**\r\n         * Use this funciton to evaluate the action after the the business logic within\r\n         * the [performAction] has executed.\r\n         */\r\n    Action.prototype.postExecuteAction = /**\r\n         * Use this funciton to evaluate the action after the the business logic within\r\n         * the [performAction] has executed.\r\n         */\r\n    function () {\r\n        console.log('Post-execution of action');\r\n    };\r\n    /**\r\n     * This function requires implementation to determin the state and result of the action.\r\n     * Use this opportunity to validate the results.\r\n     */\r\n    /**\r\n         * This function requires implementation to determin the state and result of the action.\r\n         * Use this opportunity to validate the results.\r\n         */\r\n    Action.prototype.validateActionResult = /**\r\n         * This function requires implementation to determin the state and result of the action.\r\n         * Use this opportunity to validate the results.\r\n         */\r\n    function () {\r\n        throw new Error('Concrete actions required to implement this method.');\r\n    };\r\n    /**\r\n     * Use this function to perform any cleanup, logging, or disposing of resources used\r\n     * by the action. This is the last function called during the pipeline.\r\n     */\r\n    /**\r\n         * Use this function to perform any cleanup, logging, or disposing of resources used\r\n         * by the action. This is the last function called during the pipeline.\r\n         */\r\n    Action.prototype.finish = /**\r\n         * Use this function to perform any cleanup, logging, or disposing of resources used\r\n         * by the action. This is the last function called during the pipeline.\r\n         */\r\n    function () {\r\n        console.log('Finish action.');\r\n    };\r\n    /**\r\n     * Implement this function to perform validation of business rules and data.\r\n     */\r\n    /**\r\n         * Implement this function to perform validation of business rules and data.\r\n         */\r\n    Action.prototype.validateAction = /**\r\n         * Implement this function to perform validation of business rules and data.\r\n         */\r\n    function () {\r\n        console.log('Validating the action.');\r\n        return this.validationContext;\r\n    };\r\n    return Action;\r\n}());\r\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nexport { Action };\r\n//# sourceMappingURL=action.js.map","/**\r\n * Use to indicate the type for the [ServiceMessage].\r\n */\r\n/**\r\n * Use to indicate the type for the [ServiceMessage].\r\n */\r\nexport var MessageType;\r\n/**\r\n * Use to indicate the type for the [ServiceMessage].\r\n */\r\n(function (MessageType) {\r\n    /**\r\n     * Use to indicate the message type is informational.\r\n     */\r\n    MessageType[MessageType[\"Information\"] = 1] = \"Information\";\r\n    /**\r\n     * Use to indicate the message type is warning.\r\n     */\r\n    MessageType[MessageType[\"Warning\"] = 2] = \"Warning\";\r\n    /**\r\n     * Use to indicate the message type is error.\r\n     */\r\n    MessageType[MessageType[\"Error\"] = 3] = \"Error\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=MessageType.js.map","import { MessageType } from './MessageType';\r\n/**\r\n * Use this class to manage the context of a single service call. This\r\n * class will contain a list of any service messages added during the processing\r\n * of a service request.\r\n */\r\nvar /**\r\n * Use this class to manage the context of a single service call. This\r\n * class will contain a list of any service messages added during the processing\r\n * of a service request.\r\n */\r\nServiceContext = (function () {\r\n    function ServiceContext() {\r\n        /**\r\n             * A list of service messages added by the application during the processing of the\r\n             * specified service request.\r\n             */\r\n        this.Messages = new Array();\r\n        this.ErrorMessages = new Array();\r\n    }\r\n    /**\r\n     * Use this method to add a new message to the [ServiceContext].\r\n     */\r\n    /**\r\n         * Use this method to add a new message to the [ServiceContext].\r\n         */\r\n    ServiceContext.prototype.addMessage = /**\r\n         * Use this method to add a new message to the [ServiceContext].\r\n         */\r\n    function (message) {\r\n        this.Messages.push(message);\r\n    };\r\n    /**\r\n     * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\r\n     */\r\n    /**\r\n         * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\r\n         */\r\n    ServiceContext.prototype.hasErrors = /**\r\n         * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\r\n         */\r\n    function () {\r\n        if (this.Messages && this.Messages.length > 0) {\r\n            this.ErrorMessages = this.Messages.filter(function (f) { return f.MessageType === MessageType.Error; });\r\n            if (this.ErrorMessages.length > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Use to determine if the current [ServiceContext] does not contain any errors.\r\n     */\r\n    /**\r\n         * Use to determine if the current [ServiceContext] does not contain any errors.\r\n         */\r\n    ServiceContext.prototype.isGood = /**\r\n         * Use to determine if the current [ServiceContext] does not contain any errors.\r\n         */\r\n    function () {\r\n        if (this.Messages && this.Messages.length > 0) {\r\n            this.ErrorMessages = this.Messages.filter(function (f) { return f.MessageType === MessageType.Error; });\r\n            if (this.ErrorMessages.length > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return ServiceContext;\r\n}());\r\n/**\r\n * Use this class to manage the context of a single service call. This\r\n * class will contain a list of any service messages added during the processing\r\n * of a service request.\r\n */\r\nexport { ServiceContext };\r\n//# sourceMappingURL=ServiceContext.js.map","/**\r\n * Use this class to create a message for the current [ServiceContext].\r\n */\r\nvar /**\r\n * Use this class to create a message for the current [ServiceContext].\r\n */\r\nServiceMessage = (function () {\r\n    function ServiceMessage(name, message, messageType, source, displayToUser) {\r\n        this.Name = name;\r\n        this.Message = message;\r\n        if (messageType) {\r\n            this.MessageType = messageType;\r\n        }\r\n        if (source) {\r\n            this.Source = source;\r\n        }\r\n        this.DisplayToUser = displayToUser;\r\n    }\r\n    /**\r\n     * Use this extension method to add the name of the message.\r\n     * @param name: The name of the service message.\r\n     */\r\n    /**\r\n         * Use this extension method to add the name of the message.\r\n         * @param name: The name of the service message.\r\n         */\r\n    ServiceMessage.prototype.WithName = /**\r\n         * Use this extension method to add the name of the message.\r\n         * @param name: The name of the service message.\r\n         */\r\n    function (name) {\r\n        this.Name = name;\r\n        return this;\r\n    };\r\n    /**\r\n     * Use this extension method to add the message text to the ServiceMessage item.\r\n     * @param message: The display text of the service message.\r\n     */\r\n    /**\r\n         * Use this extension method to add the message text to the ServiceMessage item.\r\n         * @param message: The display text of the service message.\r\n         */\r\n    ServiceMessage.prototype.WithMessage = /**\r\n         * Use this extension method to add the message text to the ServiceMessage item.\r\n         * @param message: The display text of the service message.\r\n         */\r\n    function (message) {\r\n        this.Message = message;\r\n        return this;\r\n    };\r\n    /**\r\n     * Use this extension method to set the [MessageType] of the ServiceMessage item.\r\n     * @param messageType: Use to indicate the message type.\r\n     */\r\n    /**\r\n         * Use this extension method to set the [MessageType] of the ServiceMessage item.\r\n         * @param messageType: Use to indicate the message type.\r\n         */\r\n    ServiceMessage.prototype.WithMessageType = /**\r\n         * Use this extension method to set the [MessageType] of the ServiceMessage item.\r\n         * @param messageType: Use to indicate the message type.\r\n         */\r\n    function (messageType) {\r\n        this.MessageType = messageType;\r\n        return this;\r\n    };\r\n    /**\r\n     * Use this extension method to set the [Source] of the ServiceMessage item.\r\n     * @param source: Use to indicate the source of the message.\r\n     */\r\n    /**\r\n         * Use this extension method to set the [Source] of the ServiceMessage item.\r\n         * @param source: Use to indicate the source of the message.\r\n         */\r\n    ServiceMessage.prototype.WithSource = /**\r\n         * Use this extension method to set the [Source] of the ServiceMessage item.\r\n         * @param source: Use to indicate the source of the message.\r\n         */\r\n    function (source) {\r\n        this.Source = source;\r\n        return this;\r\n    };\r\n    /**\r\n     * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\r\n     * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\r\n     */\r\n    /**\r\n         * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\r\n         * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\r\n         */\r\n    ServiceMessage.prototype.WithDisplayToUser = /**\r\n         * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\r\n         * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\r\n         */\r\n    function (displayToUser) {\r\n        this.DisplayToUser = displayToUser;\r\n        return this;\r\n    };\r\n    /**\r\n     * Use this method return a string representing the ServiceMessage.\r\n     */\r\n    /**\r\n         * Use this method return a string representing the ServiceMessage.\r\n         */\r\n    ServiceMessage.prototype.toString = /**\r\n         * Use this method return a string representing the ServiceMessage.\r\n         */\r\n    function () {\r\n        return \"Name: \" + this.Name + \"; Message: \" + this.Message + \"; MessageType: \" + this.MessageType.toString() + \"; Source: \" + this.Source + \"; DisplayToUser: \" + this.DisplayToUser;\r\n    };\r\n    return ServiceMessage;\r\n}());\r\n/**\r\n * Use this class to create a message for the current [ServiceContext].\r\n */\r\nexport { ServiceMessage };\r\n//# sourceMappingURL=ServiceMessage.js.map"],"names":["ActionResult","ValidationContext","ValidationContextState","MessageType"],"mappings":";;;;;;AAAA;;;;;;AAMA,AAAwB;;;;AAIxB,CAAC,UAAU,YAAY,EAAE;;;;IAIrB,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;;;;IAItD,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;;;;IAIhD,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;CACzD,EAAEA,oBAAY,KAAKA,oBAAY,GAAG,EAAE,CAAC,CAAC,CAAC;;ACpBxC;;;;;;;;;;;;;;;;;;;;AAoBA,IAoBA,MAAM,IAAI,YAAY;IAClB,SAAS,MAAM,GAAG;QACd,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,IAAIC,oCAAiB,EAAE,CAAC;QAClD,IAAI,CAAC,YAAY,GAAGD,oBAAY,CAAC,OAAO,CAAC;KAC5C;IACD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,mBAAmB,EAAE;QACzD,GAAG,EAAE,YAAY;YACb,OAAO,IAAI,CAAC,kBAAkB,CAAC;SAClC;QACD,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,IAAI;KACrB,CAAC,CAAC;;;;;;;;;;;IAWH,MAAM,CAAC,SAAS,CAAC,OAAO;;;;;IAKxB,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAC5C,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAChC,CAAC;IACF,MAAM,CAAC,SAAS,CAAC,qBAAqB,GAAG,YAAY;QACjD,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB,CAAC;IACF,AAAC;IACD,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG,YAAY;QACvC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;KAC3B,CAAC;IACF,MAAM,CAAC,SAAS,CAAC,YAAY,GAAG,YAAY;QACxC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,MAAM,EAAE,CAAC;KACjB,CAAC;IACF,MAAM,CAAC,SAAS,CAAC,aAAa,GAAG,YAAY;QACzC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,IAAI,CAAC,aAAa,EAAE,CAAC;KACxB,CAAC;;;;;;;;;;;IAWF,MAAM,CAAC,SAAS,CAAC,aAAa;;;;;IAK9B,YAAY;QACR,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;KACnF,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,KAAK;;;;IAItB,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;KACnC,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,KAAK;;;;IAItB,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;KACnC,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,iBAAiB;;;;IAIlC,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;KACzC,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,aAAa;;;;IAI9B,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACpC,IAAI,OAAO,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAGE,yCAAsB,CAAC,OAAO,CAAC;SACjE;aACI;YACD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAGA,yCAAsB,CAAC,OAAO,CAAC;SACjE;KACJ,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,kBAAkB;;;;IAInC,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;KAC7C,CAAC;;;;;;;IAOF,MAAM,CAAC,SAAS,CAAC,gBAAgB;;;IAGjC,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;KAC3C,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,iBAAiB;;;;IAIlC,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;KAC3C,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,oBAAoB;;;;IAIrC,YAAY;QACR,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;KAC1E,CAAC;;;;;;;;;IASF,MAAM,CAAC,SAAS,CAAC,MAAM;;;;IAIvB,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;KACjC,CAAC;;;;;;;IAOF,MAAM,CAAC,SAAS,CAAC,cAAc;;;IAG/B,YAAY;QACR,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,iBAAiB,CAAC;KACjC,CAAC;IACF,OAAO,MAAM,CAAC;CACjB,EAAE,CAAC;;ACnRJ;;;;;;AAMA,AAAuB;;;;AAIvB,CAAC,UAAU,WAAW,EAAE;;;;IAIpB,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;;;;IAI5D,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;;;;IAIpD,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;CACnD,EAAEC,mBAAW,KAAKA,mBAAW,GAAG,EAAE,CAAC,CAAC,CAAC;;ACtBtC;;;;;AAKA,IAKA,cAAc,IAAI,YAAY;IAC1B,SAAS,cAAc,GAAG;;;;;QAKtB,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,KAAK,EAAE,CAAC;KACpC;;;;;;;IAOD,cAAc,CAAC,SAAS,CAAC,UAAU;;;IAGnC,UAAU,OAAO,EAAE;QACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC/B,CAAC;;;;;;;IAOF,cAAc,CAAC,SAAS,CAAC,SAAS;;;IAGlC,YAAY;QACR,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,WAAW,KAAKA,mBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACxG,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;KAChB,CAAC;;;;;;;IAOF,cAAc,CAAC,SAAS,CAAC,MAAM;;;IAG/B,YAAY;QACR,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,WAAW,KAAKA,mBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACxG,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,IAAI,CAAC;KACf,CAAC;IACF,OAAO,cAAc,CAAC;CACzB,EAAE,CAAC;;ACrEJ;;;AAGA,IAGA,cAAc,IAAI,YAAY;IAC1B,SAAS,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE;QACvE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SAClC;QACD,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACxB;QACD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;KACtC;;;;;;;;;IASD,cAAc,CAAC,SAAS,CAAC,QAAQ;;;;IAIjC,UAAU,IAAI,EAAE;QACZ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;;IASF,cAAc,CAAC,SAAS,CAAC,WAAW;;;;IAIpC,UAAU,OAAO,EAAE;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,OAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;;IASF,cAAc,CAAC,SAAS,CAAC,eAAe;;;;IAIxC,UAAU,WAAW,EAAE;QACnB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,OAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;;IASF,cAAc,CAAC,SAAS,CAAC,UAAU;;;;IAInC,UAAU,MAAM,EAAE;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;;IASF,cAAc,CAAC,SAAS,CAAC,iBAAiB;;;;IAI1C,UAAU,aAAa,EAAE;QACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,OAAO,IAAI,CAAC;KACf,CAAC;;;;;;;IAOF,cAAc,CAAC,SAAS,CAAC,QAAQ;;;IAGjC,YAAY;QACR,OAAO,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,aAAa,GAAG,IAAI,CAAC,OAAO,GAAG,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,YAAY,GAAG,IAAI,CAAC,MAAM,GAAG,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC;KACxL,CAAC;IACF,OAAO,cAAc,CAAC;CACzB,EAAE,CAAC;;;;;;;;;;;;;;"}