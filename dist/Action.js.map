{"version":3,"file":"Action.js","sourceRoot":"","sources":["../src/Action.ts"],"names":[],"mappings":"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","sourcesContent":["import { ValidationContext } from 'angular-rules-engine';\r\nimport { ValidationContextState } from 'angular-rules-engine';\r\nimport { IAction } from './IAction';\r\nimport { ActionResult } from './ActionResult';\r\n\r\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nexport class Action implements IAction {\r\n    allowExecution = true;\r\n    private _validationContext: ValidationContext = new ValidationContext();\r\n    actionResult: ActionResult = ActionResult.Unknown;\r\n\r\n    constructor() { }\r\n\r\n    get validationContext(): ValidationContext {\r\n        return this._validationContext;\r\n    }\r\n\r\n\t/**\r\n\t * Use this method to execute a concrete action. A concrete action must implement\r\n\t * the [processAction] and the [validateActionResult] functions to be a valid\r\n\t * action.\r\n\t */\r\n    execute() {\r\n        console.log('Preparing to execute action.');\r\n        this.processActionPipeline();\r\n    }\r\n\r\n    private processActionPipeline() {\r\n        this.startAction();\r\n        if (this.allowExecution) {\r\n            this.processAction();\r\n        }\r\n        this.finishAction();\r\n    };\r\n\r\n    private startAction() {\r\n        console.log('Starting action.');\r\n        this.start();\r\n        this.audit();\r\n        this.preValidateAction();\r\n        this.evaluateRules();\r\n        this.postValidateAction();\r\n        this.preExecuteAction();\r\n    }\r\n\r\n    private finishAction() {\r\n        console.log('Finishing action.');\r\n        this.postExecuteAction();\r\n        this.validateActionResult();\r\n        this.finish();\r\n    }\r\n\r\n\r\n    private processAction() {\r\n        console.log('Processing action.');\r\n        this.performAction();\r\n    }\r\n\r\n\t/**\r\n\t * All action must implement this function. This is where your\r\n\t * [business logic] should be implemented. This function is called if\r\n\t * there are no validation rule exceptions.\r\n\t */\r\n    performAction() {\r\n        throw new Error('Not implemented. Requires implementation in concrete action.');\r\n    }\r\n\r\n\t/**\r\n\t * Override/Implement this function to perform an early operation in the action pipeline.\r\n\t * This function belongs to the pre-execute functions of the action pipeline.\r\n\t */\r\n    start() {\r\n        console.log('Starting action.');\r\n    }\r\n\r\n\t/**\r\n\t * Implement this function to perform any auditing features during the pre-exectuion of the\r\n\t * business logic.\r\n\t */\r\n    audit() {\r\n        console.log('Auditing action.');\r\n    }\r\n\r\n\t/**\r\n\t * Use this function to setup any validation rules before the validation happens. This\r\n\t * function is called before [evaluateRules].\r\n\t */\r\n    preValidateAction() {\r\n        console.log('Pre-validating action.');\r\n    }\r\n\r\n\t/**\r\n\t * Use this function to implement the execution of the validation and business rules. This\r\n\t * function is called after [preValidateAction].\r\n\t */\r\n    evaluateRules() {\r\n        console.log('Evaluating action rules.');\r\n        let context = this.validateAction();\r\n        if (context.isValid) {\r\n            this.allowExecution = true;\r\n            this.validationContext.state = ValidationContextState.Success;\r\n        } else {\r\n            this.allowExecution = false;\r\n            this.validationContext.state = ValidationContextState.Failure;\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t * Use to determine or handle the results of the rule evalation. This\r\n\t * function is called after the [evaluateRules].\r\n\t */\r\n    postValidateAction() {\r\n        console.log('Post-Validation of action.');\r\n    }\r\n\r\n\t/**\r\n\t * Use this function to perform any setup before the action is executed. \r\n\t */\r\n    preExecuteAction() {\r\n        console.log('Pre-execution of action.');\r\n    }\r\n\r\n\t/**\r\n\t * Use this funciton to evaluate the action after the the business logic within\r\n\t * the [performAction] has executed.\r\n\t */\r\n    postExecuteAction() {\r\n        console.log('Post-execution of action');\r\n    }\r\n\r\n\t/**\r\n\t * This function requires implementation to determin the state and result of the action.\r\n\t * Use this opportunity to validate the results. \r\n\t */\r\n    validateActionResult(): ActionResult {\r\n        throw new Error('Concrete actions required to implement this method.');\r\n    }\r\n\r\n\t/**\r\n\t * Use this function to perform any cleanup, logging, or disposing of resources used\r\n\t * by the action. This is the last function called during the pipeline.\r\n\t */\r\n    finish() {\r\n        console.log('Finish action.');\r\n    }\r\n\r\n\t/**\r\n\t * Implement this function to perform validation of business rules and data.\r\n\t */\r\n    validateAction() {\r\n        console.log('Validating the action.');\r\n        return this.validationContext;\r\n    }\r\n}\r\n"]}